<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zookeeper on 不过如此</title>
    <link>http://1.116.1.92/tags/zookeeper/</link>
    <description>Recent content in zookeeper on 不过如此</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 11 Aug 2021 00:03:05 +0800</lastBuildDate><atom:link href="http://1.116.1.92/tags/zookeeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zookeeper</title>
      <link>http://1.116.1.92/posts/middle-aware/zookeeper/</link>
      <pubDate>Wed, 11 Aug 2021 00:03:05 +0800</pubDate>
      
      <guid>http://1.116.1.92/posts/middle-aware/zookeeper/</guid>
      <description>zookeeper 是一个分布式协调服务，是集群的管理者，监视集群中各个节点的状态根据节点提交的反馈进行下一步操作 分布式程序可以基于 zk 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、master选举、分布式锁和分布式队列。
特性 顺序一致性（有序） 从同一个客户端发起的事务请求、最终将会严格按照其发起顺序被应用到 zk 中
所有的更新都是全局有序的，每一个更新都有一个唯一的时间戳，zxid(zk transaction id)
读请求只会相当对于更新有序，读请求的返回结果中会带有 zk 最新的 zxid
原子性 所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，即整个集群要么都成功应用了某个事务，要么都没有应用
单一视图 无论客户端连接的是哪个 zk 客户端，其看到的服务端数据模型都是一致的
可靠性 一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会一直被保留，除非另一个事务对其进行了变更
实时性 zookeeper 保证在一段时间内，客户端最终一定能够从服务端上读取到最新的数据状态</description>
    </item>
    
  </channel>
</rss>
